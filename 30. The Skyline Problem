class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        if(buildings.empty())
            return {};
        
        //if it's a left edge and if it's new tallest building = add that edge
        //if it's a right edge and it's already the tallest building's edge = add that edge
        
        vector<vector<int>> ans;
        
        set<pair<int,int>> s;
        
        for(auto x : buildings){
            //left edge
            s.insert({x[0],-x[2]});
            //right edge
            s.insert({x[1],x[2]});
        }
        
		//using multiset as a priortiy queue
        multiset<int> mp;
        mp.insert(0);
        
        for(auto x : s){
            int prev = *mp.rbegin();
            
            if(x.second < 0)
                mp.insert(-x.second);
            else
                mp.erase(mp.lower_bound(x.second));
            
            int nw = *mp.rbegin();
            
            //change in height of the tallest building
            if(prev != nw)
                ans.push_back({x.first,nw});
        }
        return ans;
    }
};
